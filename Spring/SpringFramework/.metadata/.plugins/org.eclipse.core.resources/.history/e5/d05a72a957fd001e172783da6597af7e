package com.jslee.spring.controller;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.jslee.spring.dto.Board;
import com.jslee.spring.dto.User;

import lombok.extern.java.Log;

@Controller		// Controller로 지정하고 빈 등록
@RequestMapping("/request")
public class RequsetController {
	
	private static final Logger Logger = LoggerFactory.getLogger(RequsetController.class);
	
	// 업로드 경로
	@Resource(name ="uploadPath")
	private String uploadPath;
	
	/**
	 * @RequestMapping : 요청 경로 매핑
	 * - /request/board 로 요청
	 * - request/board.jsp 응답
	 * @return
	 */
//	@RequestMapping(value = "/request/board", method = RequestMethod.GET) 
//	@RequestMapping("/request/board") 
	@RequestMapping("/board")
	public String request() {
		Logger.info("[GET] - /request/board");
		return "request/board";
	}
	
	// 경로 패턴 매핑
	@RequestMapping(value = "/board/{no}", method = RequestMethod.GET)
	public String requestPath(@PathVariable("no") int no) {
		Logger.info("[GET] - /request/board/{no}");
		Logger.info("no - "+no);
		return "request/board";
	}
	
	// 요청 메소드 매핑
	@ResponseBody
	@RequestMapping(value="/board", method = RequestMethod.POST)
	public String requestPost(@RequestParam int no) {
		Logger.info("[POST] - /request.post");
		Logger.info("no - "+no);
		return "SUCCESS - no? "+no;
	}
	
	// 파라미터 매핑
	@RequestMapping(value="/board",method = RequestMethod.GET, params = "id")
	public String requestParams(@RequestParam String id) {
		Logger.info("[GET] - /request/board?id=board_123");
		Logger.info("id - "+id);
		
		return "request/board";
	}
	
	// 헤더 매핑
	// headers = "헤더명=값"  , headers = "X-HTTP-Method-Override=PUT"
	@ResponseBody
	@RequestMapping(value = "/board", method = RequestMethod.PUT, headers = "Content-Type=application/json")
	public String requestHeader() {
		Logger.info("[POST] - /request/board");
		Logger.info("헤더 매핑...");
		return "SUCCESS";
	}
	
	/*
	 	@ResponeBody O : return "데이터";  --> 응답 메세지(본문 : 데이터)
	 	@ResponeBody X : return "화면이름";  --> 뷰 리졸버가 jsp 선택 -> 랜터링 -> html 응답
	 */
	
	@RequestMapping(value = "/board", method = RequestMethod.PUT)
	public String requestPUT() {
		Logger.info("[POST] (PUT) - /request/board");
		Logger.info("헤더 매핑...");
		return "redirect:/";
	}
	
	/**
	 * 컨텐츠 타입 매핑
	 * - Content-Type 헤더의 값으로 매핑
	 * consumes = "컨텐츠타입값"
	 */
	@RequestMapping(value = "/board", method = RequestMethod.POST, consumes = "application/xml")
	public String requestContentType(@RequestBody int no) {
		Logger.info("[POST] - /board/request");
		Logger.info("컨텐츠 타입 매핑...");
		Logger.info("no? "+no);
		
		return "SECCESS no? "+no;
	}
	
	/**
	 * Accept 매핑
	 * - Accept 헤더의 값으로 매핑(Accept 헤더는 응답 답을 컨텐츠 타입을 지정)
	 * produces = "컨텐츠타입값"
	 */
	@RequestMapping(value = "/board", method = RequestMethod.POST, produces = "application/xml")
	public String requestAccept() {
		Logger.info("[POST] - /board/request");
		Logger.info("Accept 타입 매핑...");
		
		return "SUCCESS";
	}
	
	// ---------------------요청 경로 매핑 ---------------------------
	// ------------------------------------------------------------
	// ---------------------요청 처리 -------------------------------
	// 헤더 요청 가져오기
	@ResponseBody
	@RequestMapping(value="/header", method = RequestMethod.GET)
	public String header(@RequestHeader("Accept") String accept
			, @RequestHeader("User-Agent") String userAgent, HttpServletRequest request) {
		Logger.info("[GET] - /request/header");
		Logger.info("@RequestHeader를 통한 헤더 정보 가져오기");
		Logger.info("Accept - "+accept);
		Logger.info("userAgent - "+userAgent);
		
		String requestAccept = request.getHeader("Accept");
		String requestUserAgent = request.getHeader("User-Agent");
		Logger.info("HttpServletRequest을 통한 헤더정보 가져오기");
		Logger.info("requestAccept - "+requestAccept);
		Logger.info("requestUserAgent - "+requestUserAgent);
		
		return "SECCESS";
	}
	
	// 본문 요청 가져오기
	@ResponseBody
	@RequestMapping(value = "/body", method = RequestMethod.POST)
//	public String requestBody(@RequestBody Board board) {
	public String requestBody(Board board) {
		// @RequestBody
		// http 요청에 메세지의 본문(body)의 내용을 객체로 변환하는 어노테이션
		// 클라이언트에서 contentType : JSON형식에 데이터를 보낸 경우 객체로 변환하기 위해서 사용
		// 생략 가능(주로 생략하고 사용)
		Logger.info("[POST] - /request/body");
		Logger.info(board.toString());
		
		return "SECCESS";
	}
	
	@ResponseBody
	@RequestMapping(value = "/check", method = RequestMethod.POST)
	public String requestCheck(@RequestParam("hobby") String[] hobbies) {
		// 체크박스 다중 데이터는 배열로 전달받을 수 있음
		Logger.info("POST - /request/check");
		
		for(String hobby : hobbies) {
			Logger.info("hobby? "+hobby);
		}
		
		return "SUCCESS";
	}
	
	/**
	 * date형식과 여러 요청 정보를 객체로 가져오기
	 * @param uesr
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/user", method = RequestMethod.POST)
//	public String requestUser(String birth) {
//	public String requestUser(@DateTimeFormat(pattern = "yyyy-MM-dd") Date birth) {
	public String requestUser(User uesr) {
		// 체크박스 다중 데이터는 배열로 전달받을 수 있음
		Logger.info("POST - /request/check");
//		Logger.info("birth? "+birth);
		Logger.info("uesr? "+uesr);
		
		return "SUCCESS";
	}
	
	/**
	 * Map 컬렉션으로 요청 파라미터 가져오기
	 * 요청 경로 : /request/map/name=김조은&age=20
	 * @param map
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/map")
	public String requestMap(@RequestParam Map<String, String> map) {
		String name = map.get("name");
		String age = map.get("age");
		
		Logger.info("name? "+name);
		Logger.info("age? "+age);
		return "SUCCESS";
	}
	
	// 파일 업로드
	@ResponseBody
	@RequestMapping(value = "/file", method = RequestMethod.POST)
	public String fileUpload(MultipartFile file) throws Exception{
		Logger.info("/request/file");
		Logger.info("uploadPath?" + uploadPath);
		
		if(file == null) return "FAIL";
		
		Logger.info("originalFileName? "+file.getOriginalFilename());
		Logger.info("size? "+file.getSize());
		Logger.info("contentType? "+file.getContentType());
		
		byte[] fileData = file.getBytes();
		
		return null;
	}
}