/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-27 05:54:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class valodation01_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>아이디 비밀번호 유효성 검사</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>로그인</h1>\r\n");
      out.write("	<h3>유효성 검사</h3>\r\n");
      out.write("	<!-- \r\n");
      out.write("		onsubmit=\"return\" 여부 \r\n");
      out.write("		여부 true이면 submit 전송\r\n");
      out.write("			false이면 submit 안함\r\n");
      out.write("	-->\r\n");
      out.write("	<form name=\"loginForm\" onsubmit=\"return checkLogin()\" action=\"valodation01_pro.jsp\" method=\"post\">\r\n");
      out.write("		<p>아이디 : <input type=\"text\" name=\"id\" maxlength=\"20\"/></p>\r\n");
      out.write("		<p>비밀번호 : <input type=\"password\" name=\"pw\"/></p>\r\n");
      out.write("		<p><input type=\"submit\" value=\"로그인\"></p>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		// 로그인 유요성 검사\r\n");
      out.write("		function checkLogin(){\r\n");
      out.write("// 			alert(\"로그인 요청\")\r\n");
      out.write("			let form = document.loginForm	// name이 loginForm인 폼 요소 가져옴\r\n");
      out.write("			\r\n");
      out.write("			let id = form.id.value\r\n");
      out.write("			let pw = form.pw.value\r\n");
      out.write("			\r\n");
      out.write("// 			alert(id)\r\n");
      out.write("// 			alert(pw)\r\n");
      out.write("\r\n");
      out.write("			// 1. 아이디 필수값, 6~20자 이내\r\n");
      out.write("			if(id == \"\"){\r\n");
      out.write("				alert(\"아이디를 입력해주세요\")\r\n");
      out.write("				form.id.focus()		// id input 태그에 포커스\r\n");
      out.write("				return false\r\n");
      out.write("			}\r\n");
      out.write("			if(id.length < 6 || id.length > 20){\r\n");
      out.write("				alert('아이디는 6~20자 이내로 입력 가능합니다')\r\n");
      out.write("				form.id.select()	// id 입력 값을 선택\r\n");
      out.write("				return false\r\n");
      out.write("			}\r\n");
      out.write("			// 2. 비밀번호는 필수값, 6자 이상\r\n");
      out.write("			if(pw == \"\"){\r\n");
      out.write("				alert(\"비밀번호를 입력해주세요\")\r\n");
      out.write("				form.pw.focus()		// pw input 태그에 포커스\r\n");
      out.write("				return false\r\n");
      out.write("			}\r\n");
      out.write("			if(pw.length < 6){\r\n");
      out.write("				alert('비밀번호는 6~20자 이내로 입력 가능합니다')\r\n");
      out.write("				form.pw.select()	// pw 입력 값을 선택\r\n");
      out.write("				return false\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			return true\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
